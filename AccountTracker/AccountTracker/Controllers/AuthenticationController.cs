using AccountTracker.Services;
using AccountTracker.ViewModels;
using FluentResults;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Linq;
using System.Threading.Tasks;

namespace AccountTracker.Controllers
{
    [ApiController]
    [Route("[controller]")]
    [AllowAnonymous]
    public class AuthenticationController : ControllerBase
    {
        private readonly ILogger<AuthenticationController> _logger;
        private readonly IAuthenticationService _authService;
        //todo: Apikey should not be saved as constants
        const string hrApiKey = "5555";
        const string acApiKey = "7777";

        public AuthenticationController(ILogger<AuthenticationController> logger, IAuthenticationService authService)
        {
            _logger = logger;
            _authService = authService;
        }


        [HttpPost("Login")]
        [AllowAnonymous]
        public async Task<ActionResult> Login([FromBody] LoginRequest loginRequest)
        {
            Result<(string authToken, Domain.UserModel user)> res = await _authService.Login(loginRequest);

            if (res.IsSuccess)
            {
                return Ok(new
                {
                    User = res.Value.user,
                    AuthToken = res.Value.authToken
                });
            }

            return BadRequest(new { Error = res.Errors.FirstOrDefault()});
        }


        [HttpPost("3rdPartyAuth")]
        [AllowAnonymous]
        public async Task<ActionResult<LoginResponse>> Auth([FromBody] LoginRequest loginRequest, [FromQuery] string ApiKey)
        {
            //todo: ApiKey should be generated by hash and checked
            if (ApiKey is not hrApiKey && ApiKey is not acApiKey) return BadRequest("Wrong ApiKey!!");


            Result<(string authToken, Domain.UserModel user)> res = await _authService.Login(loginRequest);

            if (res.IsSuccess)
            {
                return Ok(new LoginResponse()
                {
                    Email = res.Value.user.Email,
                    Key = IDService.Encode("sk", res.Value.user.Id) + "_" + BCrypt.Net.BCrypt.HashPassword(ApiKey),
                });
            }

            //return BadRequest(new LoginResponse());
           return BadRequest(new { Error = res.Errors.FirstOrDefault() });
        }



        [AllowAnonymous]
        [HttpPost("Signup")]
        public async Task<IActionResult> Signup([FromBody] SignupRequest credentials)
        {
            var res = await _authService.Register(credentials);

            if (res.IsFailed)
                return BadRequest(res.Errors);

            return Ok(res.Successes);

        }

    }
    public class LoginResponse
    {
        public string Email { get; set; }
        public string Key { get; set; }
    }

}
